// package the generated Java class lives in; no need to change this
%package "parser";

// name of the generated Java class; no need to change this
%class "Parser";

// no need to change this either
%embed {:
	// turn off automated error recovery
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws java.io.IOException, Exception {
		super.recoverFromError(new Symbol(0), in);
	}
:};

// the list of all terminals; no need to change this
%terminals MODULE, INT, VOID, IF, ELSE, WHILE, RETURN, BREAK, BOOLEAN, PUBLIC, TRUE, FALSE,
           INT_LITERAL, STRING_LITERAL, ID, TYPE, IMPORT,
           PLUS, MINUS, TIMES, DIV, MOD, EQEQ, NEQ, LEQ, GEQ, LT, GT,
           LBRACKET, RPAREN, COMMA, RCURLY, LCURLY, SEMICOLON, RBRACKET, LPAREN, EQL;

// Beaver parses precedence top down;
// This means that we favour the IF over the ELSE and a statement like the below:
// IF {...} IF {...} ELSE {...}
// will get parsed as having a nested IF/ELSE in the outer IF rather than an outer IF/ELSE
// NOTE: not sure if left associativity is actually correct or would nonassoc be better.
// This shouldn't impact anything because the statement is required in full and it is not an binary op.
%left IF;
%left ELSE;

// declaration of start symbol; no need to change this
%goal Module;

/* ------- Our code begins here. ------- */
// NOTE: Beaver uses EBNF to specify rules.
// These EBNF rules are then used to generate a  java class that implements the parser.
// Hence, Beaver is a parser generator.
// Read more: http://beaver.sourceforge.net/ (tbh, looks ancient)
// Syntax page: http://beaver.sourceforge.net/spec.html
// NOTE: Beaver finds the rightmost terminal symbol that has precedence and uses this to assign precedence to rules if
// the precedence is not explicitly defined for a rule.
// If none can be found, the rule will be set to the lowest precedence.
/* TODO: Flesh out the rule for Module, and add rules for other nonterminals. Here is an example
         of a rule you may want to add:

   Accessibility = PUBLIC
		  |
		  ;
  */

/*
EBNF Notation:
1. SCREAMING_SNAKE_CASE: Base tokens (string literals included)
2. PascalCase: production rules
*/

// A module is a keyword module followed by ident, then open brace, some imports, declarations then close brace
// The imports/declarations can be empty
// We define them here to avoid ambiguity later on
// through forms such as Import = "" | concreteImport
// in EBNF: Module = IDENT "{" imports, dec "}"
Module = MODULE ID LCURLY ImportList DeclarationList RCURLY;

// An import statement consists of 0 or more import statements.
// As explained above, we omit the optional declaration here in favour of expressing it in Module.
// In EBNF: Import = "import" IDENT ";"
Import = IMPORT ID SEMICOLON;

ImportList = Import ImportList | ;

// A declaration is function or type or field declaration
Declaration = FuncDec | TypeDec | FieldDec;

DeclarationList = Declaration DeclarationList | ;

// A function declaration consists of a few things but it'll be omitted here for brevity
// in EBNF: FuncDec = Accessibility Type IDENT "(" ParamList ")" "{" Statements? "}"
FuncDec = AccSpec Type ID LPAREN OptParamList RPAREN LCURLY StatementList RCURLY;

// Equivalent to matching either paramlist or nothing
OptParamList = ParamList | ;

ParamList = Type ID | Param COMMA Type ID;

FieldDec = AccSpec Type ID SEMICOLON;

// A type declaration consists of accessibility specifier, typename, identifier and semicolon
// in EBNF: TypeDec = Accessibility Type IDENT "=" IDENT ";"
TypeDec = AccSpec TYPE ID EQL STRING_LITERAL SEMICOLON; // TYPE is the terminal

AccSpec = PUBLIC | ;

// A type name is either a primitive, an array of an identifier.
// NOTE: This might be wrong wrt the identifier portion
Type = Primitive | Array | ID;

Primitive = VOID | BOOLEAN | INT;

// An array is a typename, left bracket then right bracket
Array = Type LBRACKET RBRACKET;

Param = Type ID;

Statement = LocalVar | Block | IfElse | While | Break | Return | ExprStatement;

StatementList = Statement StatementList | ;

LocalVar = Type ID SEMICOLON;

Block = LCURLY StatementList RCURLY;

IfElse = If OptElse;

If = IF LPAREN Expr RPAREN Statement;

Else = ELSE Statement;

OptElse = Else | ;

While = WHILE LPAREN Expr RPAREN Statement;

Break = BREAK SEMICOLON;

Return = RETURN OptExpr SEMICOLON;

// NOTE: Better naming could be helpful here
// Broken into 2 to allow the Or grouping to occur separately for readability
ExprStatement = Expr SEMICOLON;

Expr = Assignment | RightHandExpr;

OptExpr = Expr | ;

Assignment = LeftHandExpr EQL Expr;

LeftHandExpr = ID | ArrayAccess;

// An array access is a LHS expr then LBRACKET Expr RBRACKET
// Because of a r/r conflict, we have to expand the definition of LHS
// The expanded def is simply ID | ArrayAccess.
ArrayAccess = ID LBRACKET Expr RBRACKET | ArrayAccess LBRACKET Expr RBRACKET;

RightHandExpr = ArithExpr | ComplexArith;

ComplexArith = ArithExpr CompOp ArithExpr;

CompOp = EQEQ | NEQ | LT | LEQ | GT | GEQ;

ArithExpr = ArithExpr AddOp Term | Term;

AddOp = PLUS | MINUS;

Term = Term MulOp Factor | Factor;

MulOp = TIMES | DIV | MOD;

Factor = MINUS Factor | Primary;

Primary = LeftHandExpr | FuncCall | ArrayExpr | INT_LITERAL | STRING_LITERAL | Bool | ParenExpr;

Bool = TRUE | FALSE;

ParenExpr = LPAREN Expr RPAREN;

FuncCall = ID LPAREN ExprList RPAREN;

/*
An expression list is basically: (expr, expr, expr) OR (expr).
This can never be empty.
Note that because of the comma, we have 2 building blocks.
The first is the basic (expr), which is the only one WITHOUT a comma.
For any other forms of the expression list, we need expr + COMMA (expr,)
This means that we express this as a list of 2 types of items.
*/
ArrayExpr = LBRACKET ExprList RBRACKET;

ExprList = Expr | Expr COMMA ExprList;

/**/
